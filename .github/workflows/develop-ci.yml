name: develop build check and CI check on docker

on:
  pull_request:
    branches: [ "develop" ]

permissions:
  checks: write
  pull-requests: write

env:
  SPRING_DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/bobjoying_image:latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: PostgreSQL 설치
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '16'
          postgresql db: 'bobjoying'
          postgresql user: 'postgres'
          postgresql password: '1234'

      - name: 환경변수 설정
        run: |
          touch ./.env
          echo "${{ secrets.DOCKER_COMPOSE_ENV }}" > ./.env
        shell: bash

      - name: properties 파일 생성
        run: |
          cd ./src/main
          mkdir resources
          cd resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
        shell: bash

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle 실행 허가
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: 테스트 결과 PR에 코멘트 작성
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()  # 테스트가 실패했을때만 or 테스트가 성공했을때만 알려주기(여기선 둘다!)
        with:
          files: |
            **/build/test-results/**/*.xml

      # Files changed에서 어디에서 잘못되었는지 가르쳐준다.
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

      - name: Build Docker image
        run: docker build . -t "$SPRING_DOCKER_IMAGE"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push "$SPRING_DOCKER_IMAGE"

      - name: Build and run Docker containers
        run: |
          docker-compose up -d

      - name: 빌드 결과 Slack으로 알림
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author,pullRequest # selectable (default: repo,message)
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: ` Github Action CI 결과입니다\n 결과 : ${{ job.status }}\n repo: ${process.env.AS_REPO}\n author: ${process.env.AS_AUTHOR}\n PR: ${process.env.AS_PULL_REQUEST}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
